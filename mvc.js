/* モデル 複数のオブジェクトを入れることができます
-------------------------------------------------------------------------------*/
function Models (_objs) {
    this.init(_objs);
}

Models.prototype = {

    /* 初期化
    -------------------------------------------------------------------------------*/
    init: function (_objs) {

        /* モデル
        -------------------------------------------------------------------------------*/
        this.models = [];

        /* キーインデックス (モデルデータに key プロパティが含まれている場合このオブジェクトにインデックスされる)
        -------------------------------------------------------------------------------*/
        this.keys = {};

        /* IDインデックス
        -------------------------------------------------------------------------------*/
        this.ids = {};

        /* IDカウント
        -------------------------------------------------------------------------------*/
        this.idCount = 1;

        /* イベント (IDがキーとなっており、子要素にコールバック関数の配列を持つ)
        -------------------------------------------------------------------------------*/
        this.events = {};

        /* ローカルストレージにデータが存在したかどうかのフラグ
        -------------------------------------------------------------------------------*/
        this.isLocalStorage = false;

        /* _objsが文字列の場合ローカルストレージからデータを取得する
        -------------------------------------------------------------------------------*/
        if (typeof(_objs) == "string") {

            /* ローカルストレージの名前を保持しておく
            -------------------------------------------------------------------------------*/
            this.localStorageName = _objs;

            /* ローカルストレージから読み込む
            -------------------------------------------------------------------------------*/
            var jsonText = localStorage[_objs];
            if (jsonText) {
                try {
                    var objs = JSON.parse(jsonText);
                    this.add(objs);
                    this.isLocalStorage = true;    
                }
                catch (_error) {
                    this.isLocalStorage = false;
                }
            }
            else {
                this.isLocalStorage = false;
            }
        }
        else {

            /* モデルデータの追加
            -------------------------------------------------------------------------------*/
            this.add(_objs);

        }
    },

    /* クローン生成用再帰処理関数用変数切り分け挿入
    -------------------------------------------------------------------------------*/
    cloneRecursiveStackAdd: function (_obj, _key, _value) {

        /* 配列
        -------------------------------------------------------------------------------*/
        if (_obj && _obj.constructor === Array) {
            _obj.push(_value);
        }

        /* オブジェクト
        -------------------------------------------------------------------------------*/
        else {
            _obj[_key] = _value;
        }
    },

    /* クローン生成用再帰処理関数
    -------------------------------------------------------------------------------*/
    cloneRecursive: function (_data) {

        var value = _data.value;
        var stack = _data.stack;
        var key = _data.key;
        var nest = _data.nest;
        var type = typeof(value);

        /* 数値
        -------------------------------------------------------------------------------*/
        if (type == "number") {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* 文字列
        -------------------------------------------------------------------------------*/
        else if (type == "string") {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* 配列
        -------------------------------------------------------------------------------*/
        else if (value && value.constructor === Array) {

            /* スタックが存在していない場合生成を行う
            -------------------------------------------------------------------------------*/
            if (stack === undefined) {
                stack = [];
            }

            /* スタックがすでに存在している場合新しくオブジェクトを作成し追加し、そのスタックを指定する
            -------------------------------------------------------------------------------*/
            else {
                var obj = [];
                this.cloneRecursiveStackAdd(stack, key, obj);
                var stack2 = obj;
            }

            for (var i = 0; i < value.length; i++) {
                

                /* それ以外
                -------------------------------------------------------------------------------*/
                if (value[i] !== value) {
                    nest++;
                    this.cloneRecursive({
                        key: i,
                        value: value[i],
                        stack: stack,
                        nest: nest
                    });
                    nest--;
                }


            };
        }

        /* window
        -------------------------------------------------------------------------------*/
        else if (value === window) {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* document
        -------------------------------------------------------------------------------*/
        else if (value === document) {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* DOM Node
        -------------------------------------------------------------------------------*/
        else if ("tagName" in value) {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* オブジェクト
        -------------------------------------------------------------------------------*/
        else if (type == "object") {

            /* スタックが存在していない場合生成を行う
            -------------------------------------------------------------------------------*/
            if (stack === undefined) {
                stack = {};
                var stack2 = stack;
            }

            /* スタックがすでに存在している場合新しくオブジェクトを作成し追加し、そのスタックを指定する
            -------------------------------------------------------------------------------*/
            else {
                var obj = {};
                this.cloneRecursiveStackAdd(stack, key, obj);
                var stack2 = obj;
            }

            /* 要素の数だけ繰り返す
            -------------------------------------------------------------------------------*/
            for (var i in value) {
                if (value[i] !== value) {
                    nest++;
                    this.cloneRecursive({
                        key: i,
                        value: _data.value[i],
                        stack: stack2,
                        nest: nest
                    });
                    nest--;
                }
           
            };

        }

        /* 関数
        -------------------------------------------------------------------------------*/
        else if (type == "function") {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* 真偽値
        -------------------------------------------------------------------------------*/
        else if (type == "boolean") {
            this.cloneRecursiveStackAdd(stack, key, value);
        }

        /* 未定義
        -------------------------------------------------------------------------------*/
        else if (type == "undefined") {
            this.cloneRecursiveStackAdd(stack, key, value);
        }
        return stack;
    },

    /* クローン生成
    -------------------------------------------------------------------------------*/
    clone: function () {
        // return new Models( JSON.parse(JSON.stringify(this.models)) );

        var cloneObj = [];

        /* テスト
        -------------------------------------------------------------------------------*/
        // console.log("無限ループ");


        for (var i = 0; i < this.models.length; i++) {
            
            var stack = undefined;
            var nest = 0;

            /* テスト
            -------------------------------------------------------------------------------*/
            // console.log("this.models[i]", this.models[i]);


            cloneObj.push(this.cloneRecursive({
                key: i,
                value: this.models[i],
                stack: stack,
                nest: nest
            }));

        };

        /* テスト
        -------------------------------------------------------------------------------*/
        // console.log("%ccloneobj", "font-size:30px;", cloneObj);

        
        return new Models(cloneObj);
    },

    /* モデルデータの追加 (追加したモデルが返ります)
    -------------------------------------------------------------------------------*/
    add: function (_objs) {

        /* 配列
        -------------------------------------------------------------------------------*/
        if (_objs && _objs.constructor === Array) {

            /* 追加したモデルが入る変数
            -------------------------------------------------------------------------------*/
            var addModels = [];

            for (var i = 0; i < _objs.length; i++) {

                /* idが存在
                -------------------------------------------------------------------------------*/
                if ("id" in _objs[i]) {
                    this.idCount = Math.max(this.idCount, _objs[i].id)+1;
                }

                /* idが存在しない
                -------------------------------------------------------------------------------*/
                else {
                    _objs[i].id = this.idCount++;
                }

                /* IDインデックスに追加
                -------------------------------------------------------------------------------*/
                this.ids[_objs[i].id] = _objs[i];

                /* イベントを格納する要素の作成
                -------------------------------------------------------------------------------*/
                this.events[_objs[i].id] = [];

                /* モデルに追加
                -------------------------------------------------------------------------------*/
                this.models.push(_objs[i]);
                addModels.push(_objs[i]);


                /* キーインデックスに追加 (重複したキーを指定された場合キーは上書きされます)
                -------------------------------------------------------------------------------*/
                if ("key" in _objs[i]) {
                    this.keys[_objs[i].key] = _objs[i];
                }

                /* イベント送出
                -------------------------------------------------------------------------------*/
                var event = {
                    target: _objs[i],
                    model: _objs[i],
                    type: "add",
                    key: _objs[i].key,
                    id: _objs[i].id
                };
                for (var ii = 0; ii < this.events[_objs[i].id].length; ii++) {
                    this.events[_objs[i].id][ii].call(_objs[i], event);
                }

            }

            /* 追加したモデルが配列で返ります
            -------------------------------------------------------------------------------*/
            return addModels;
        }

        /* オブジェクト
        -------------------------------------------------------------------------------*/
        else if (typeof(_objs) === "object") {


            /* idが存在
            -------------------------------------------------------------------------------*/
            if ("id" in _objs) {
                this.idCount = Math.max(this.idCount, _objs.id)+1;
            }

            /* idが存在しない
            -------------------------------------------------------------------------------*/
            else {
                _objs.id = this.idCount++;
            }

            /* IDインデックスに追加
            -------------------------------------------------------------------------------*/
            this.ids[_objs.id] = _objs;

            /* イベントを格納する要素の作成
            -------------------------------------------------------------------------------*/
            this.events[_objs.id] = [];

            /* モデルに追加
            -------------------------------------------------------------------------------*/
            this.models.push(_objs);

            /* キーインデックスに追加 (重複したキーを指定された場合キーは上書きされます)
            -------------------------------------------------------------------------------*/
            if ("key" in _objs) {
                this.keys[_objs.key] = _objs;
            }

            /* 追加したモデルが返ります
            -------------------------------------------------------------------------------*/
            return _objs;
        }

        /* 失敗
        -------------------------------------------------------------------------------*/
        else {
            return false;
        }
    },

    /* モデルデータの取得
    -------------------------------------------------------------------------------*/
    get: function () {

        /* 配列で強制的に返す場合true
        -------------------------------------------------------------------------------*/
        var isForceArray = false;

        /* 引数
        -------------------------------------------------------------------------------*/
        var args = arguments;

        /* 返すデータ
        -------------------------------------------------------------------------------*/
        var ret = [];

        for (var i = 0; i < args.length; i++) {
            
            /* 数値の場合、指定したIDのモデルを返す
            -------------------------------------------------------------------------------*/
            if (typeof(args[i]) === "number") {

                var model = this.ids[args[i]];

                /* テスト
                -------------------------------------------------------------------------------*/
                // console.log("model", model, args[i]);

                /* モデルが存在しない場合新しく作成したものを返す
                -------------------------------------------------------------------------------*/
                if (!model) {
                    model = this.add({
                        id: args[i]
                    });
                }

                /* テスト
                -------------------------------------------------------------------------------*/
                // console.log("model", model);

                ret.push(model);
            }

            /* 文字列の場合キーに関連するデータを返す
            -------------------------------------------------------------------------------*/
            else if (typeof(args[i]) === "string") {

                var model = this.keys[args[i]];

                /* テスト
                -------------------------------------------------------------------------------*/
                // console.log("model", model, args[i]);

                /* モデルが存在しない場合新しく作成したものを返す
                -------------------------------------------------------------------------------*/
                if (!model) {
                    model = this.add({
                        key: args[i]
                    });
                }

                /* テスト
                -------------------------------------------------------------------------------*/
                // console.log("model", model);


                ret.push(model);
            }

            /* 配列ではないオブジェクト
            -------------------------------------------------------------------------------*/
            else if (args[i] && args[i].constructor !== Array && typeof(args[i]) === "object"){

                /* 指定した条件にマッチするデータを配列で返す
                -------------------------------------------------------------------------------*/
                if ("where" in args[i]) {

                    /* 配列として強制的に返す
                    -------------------------------------------------------------------------------*/
                    isForceArray = true;

                }

                /* データの中で最も大きいデータを返す
                -------------------------------------------------------------------------------*/

                /* データの中で最も小さいデータを返す
                -------------------------------------------------------------------------------*/

            }

        }

        /* 配列がひとつしかない場合配列から取り出す
        -------------------------------------------------------------------------------*/
        if (!isForceArray || ret.length == 1) {
            ret = ret[0];
        }

        return ret;
    },


    /* デフォルト設定 (指定したターゲットの指定したpropertyが定義されていなかった場合、デフォルト値を設定する)
       localStorageへのsaveは自動的に行われる為、明示的に行う必要はありません
    -------------------------------------------------------------------------------*/
    default: function (_target, _property, _default) {

        /* 指定したプロパティが存在しないか確認する
        -------------------------------------------------------------------------------*/
        if (this.get(_target)[_property] === undefined) {

            /* オブジェクト作成
            -------------------------------------------------------------------------------*/
            var object = {};
            object[_property] = _default;

            /* セット
            -------------------------------------------------------------------------------*/
            this.set(_target, object);

            /* 保存
            -------------------------------------------------------------------------------*/
            var that = this;
            clearTimeout(this.saveTimer);
            this.saveTimer = setTimeout(function(){
                that.save();    
            }, 100);
        }
    },

    /* localStorage保存タイマー
    -------------------------------------------------------------------------------*/
    saveTimer: undefined,

    /* モデルデータごとに繰り返す
    -------------------------------------------------------------------------------*/
    each: function (_callBack) {

        if (typeof(_callBack) != "function") {
            return false;
        }

        for (var i = 0; i < this.models.length; i++) {
            _callBack.call(this.models[i], this.models[i].id, this.models[i].key);
        };

    },

    /* 指定したモデルデータをメモリ上から開放します
    -------------------------------------------------------------------------------*/
    clear: function(_model) {

        /* キーインデックスから開放
        -------------------------------------------------------------------------------*/
        if (_model.key) {
            delete this.keys[_model.key];
        }

        /* 削除される要素のIDとキーを取得
        -------------------------------------------------------------------------------*/
        var id = _model.id;
        var key = _model.key;

        /* IDインデックスから削除
        -------------------------------------------------------------------------------*/
        delete this.ids[_model.id];

        /* 配列から削除
        -------------------------------------------------------------------------------*/
        var newModels = [];
        for (var i = 0; i < this.models.length; i++) {
            if (this.models[i] !== _model) {
                newModels.push(this.models[i]);
            }
        };
        this.models = newModels;

        /* モデルの削除
        -------------------------------------------------------------------------------*/
        delete _model;

        /* モデルに変化があった場合コールバック関数を実行しイベントを削除
        -------------------------------------------------------------------------------*/
        if (this.events[id]) {
            var event = {
                id: id,
                key: key,
                type: "remove"
            };
            for (var i = 0; i < this.events[id].length; i++) {
                this.events[id][i].call(_model, event);
            }
            delete this.events[id];
        }
    },

    /* データの削除
    -------------------------------------------------------------------------------*/
    remove: function () {

        /* 引数
        -------------------------------------------------------------------------------*/
        var args = arguments;

        /* 返すデータ
        -------------------------------------------------------------------------------*/
        var ret = [];

        for (var i = 0; i < args.length; i++) {
            
            /* 数値の場合、指定したインデックスのモデルを削除する
            -------------------------------------------------------------------------------*/
            if (typeof(args[i]) === "number") {
                this.clear(this.get(args[i]));
            }

            /* 文字列の場合キーに関連するデータを返す
            -------------------------------------------------------------------------------*/
            else if (typeof(args[i]) === "string") {
                this.clear(this.get(args[i]));
            }

            /* 配列ではないオブジェクト
            -------------------------------------------------------------------------------*/
            else if (args[i] && args[i].constructor !== Array && typeof(args[i]) === "object"){

                /* 指定した条件にマッチするデータを削除
                -------------------------------------------------------------------------------*/
                if ("where" in args[i]) {

                }

                /* データの中で最も大きいデータを削除
                -------------------------------------------------------------------------------*/

                /* データの中で最も小さいデータを削除
                -------------------------------------------------------------------------------*/

            }
        }
    },

    /* 指定したモデルにデータをセット (基本的なデータセットはこのメソッドから行います)
    -------------------------------------------------------------------------------*/
    set: function (_target, _obj) {

        /* モデルの取得
        -------------------------------------------------------------------------------*/
        var model = this.get(_target);

        /* IDの取得
        -------------------------------------------------------------------------------*/
        var id = model.id;

        /* デバッグ
        -------------------------------------------------------------------------------*/
        // console.log("書き換え前 model", model);

        /* 変化のあったモデルデータを格納しておく変数
        -------------------------------------------------------------------------------*/
        var changedModels = {};

        /* 書き換え開始 (merge)
        -------------------------------------------------------------------------------*/
        for (var i in _obj) {
            if (model[i] != _obj[i]) {
                model[i] = _obj[i];
                changedModels[i] = model[i];
            }

        };

        /* デバッグ
        -------------------------------------------------------------------------------*/
        // console.log("書き換え後 model", model);

        /* モデルに変化があった場合コールバック関数を実行
        -------------------------------------------------------------------------------*/
        if (this.events[id]) {
            var event = {
                changedModels: changedModels,
                target: model,
                model: model,
                type: "change",
                key: model.key,
                id: model.id
            };
            for (var i = 0; i < this.events[id].length; i++) {
                this.events[id][i].call(model, event);
            }
        }
    },


    /* 指定したモデルにイベントを登録 (modelsのevent)
    -------------------------------------------------------------------------------*/
    on: function (_target, _callBack) {

        /* モデルの取得
        -------------------------------------------------------------------------------*/
        var model = this.get(_target);

        /* IDの取得
        -------------------------------------------------------------------------------*/
        var id = model.id;

        /* コールバック関数の登録
        -------------------------------------------------------------------------------*/
        this.events[id].push(_callBack);
    },

    /* 全てのモデルデータをローカルストレージに保存
    -------------------------------------------------------------------------------*/
    save: function (_name) {
        if (_name) {
            var jsonText = JSON.stringify(this.models);
            localStorage[_name] = jsonText;
        }
        else {

            /* 読み込み時に使用されたローカルストレージネームガある場合そちらに保存する
            -------------------------------------------------------------------------------*/
            if (this.localStorageName) {
                var jsonText = JSON.stringify(this.models);
                localStorage[this.localStorageName] = jsonText;
            }

            return false;
        }
    }

};




/* コントローラ
-------------------------------------------------------------------------------*/
function Controller () {
    this.init();
}

Controller.prototype = {

    /* 初期化
    -------------------------------------------------------------------------------*/
    init: function () {
        this.functions = {};
    },

    /* 関数の追加
    -------------------------------------------------------------------------------*/
    set: function (_name, _function) {
        this.functions[_name] = _function;
    },

    /* 関数の実行
    -------------------------------------------------------------------------------*/
    run: function (_args) {

        /* 実行する関数 (配列とその子に文字列リテラルを使用する・関数は上から順番に実行される)
        -------------------------------------------------------------------------------*/
        var functions = _args.functions || [];

        /* 書き換えるビュー (ビューの指定にはオブジェクト型でも配列型でもどちらでも良い)
        -------------------------------------------------------------------------------*/
        var views = _args.views;

        /* 使用するデータ (必ずオブジェクト型にする)
        -------------------------------------------------------------------------------*/
        var data = _args.data;

        /* 関数の実行
        -------------------------------------------------------------------------------*/
        for (var i = 0; i < functions.length; i++) {
            if (this.functions[functions[i]]) {
                this.functions[functions[i]].call(data, data, views);
            }
        }

        /* ビューの書き換え ビューを走査し {{}}で囲まれた部分をdataで置換する
        -------------------------------------------------------------------------------*/

    },

    /* 関数の削除
    -------------------------------------------------------------------------------*/
    remove: function (_key) {
        delete this.functions[_key];
    },


    /* 指定したDOM要素にイベントを登録する
    -------------------------------------------------------------------------------*/
    on: function(_selector, _type, _callback) {
        if (typeof(_selector) == "string") {
            var elms = Sizzle(_selector);

            /* テスト
            -------------------------------------------------------------------------------*/
            // console.log("elms", elms, _selector);
        }
        else {
            var elms = [_selector];
        }
        var that = this;
        elms.forEach(function(_elm){
            var elm = _elm;
            _elm.addEventListener (_type, function (_event) {
                if (_callback.call(elm, _event, that)) {
                    _event.preventDefault();
                }
            }, false);
        });
    }
};


/* ビュー
-------------------------------------------------------------------------------*/
function View () {
    this.init();
}

View.prototype = {

    /* 初期化
    -------------------------------------------------------------------------------*/
    init: function () {
        this.templates = {};
    },

    /* 新しいビューの作成 {{data}} が書き換わります
    -------------------------------------------------------------------------------*/
    set: function(_key, _html){
        this.templates[_key] = _html;
    },

    /* ビューの削除
    -------------------------------------------------------------------------------*/
    remove: function (_key) {
        delete this.templates[_key];
    }

};